// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nikimanoledaki/calculator-microservice/protos/calculator (interfaces: CalculatorClient)

// Package mock_calculator is a generated GoMock package.
package mock_calculator

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	calculator "github.com/nikimanoledaki/calculator-microservice/protos/calculator"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCalculatorClient is a mock of CalculatorClient interface
type MockCalculatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorClientMockRecorder
}

// MockCalculatorClientMockRecorder is the mock recorder for MockCalculatorClient
type MockCalculatorClientMockRecorder struct {
	mock *MockCalculatorClient
}

// NewMockCalculatorClient creates a new mock instance
func NewMockCalculatorClient(ctrl *gomock.Controller) *MockCalculatorClient {
	mock := &MockCalculatorClient{ctrl: ctrl}
	mock.recorder = &MockCalculatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalculatorClient) EXPECT() *MockCalculatorClientMockRecorder {
	return m.recorder
}

// GetAverage mocks base method
func (m *MockCalculatorClient) GetAverage(arg0 context.Context, arg1 *calculator.AverageRequest, arg2 ...grpc.CallOption) (*calculator.AverageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAverage", varargs...)
	ret0, _ := ret[0].(*calculator.AverageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverage indicates an expected call of GetAverage
func (mr *MockCalculatorClientMockRecorder) GetAverage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverage", reflect.TypeOf((*MockCalculatorClient)(nil).GetAverage), varargs...)
}

// GetSum mocks base method
func (m *MockCalculatorClient) GetSum(arg0 context.Context, arg1 *calculator.SumRequest, arg2 ...grpc.CallOption) (*calculator.SumResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSum", varargs...)
	ret0, _ := ret[0].(*calculator.SumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSum indicates an expected call of GetSum
func (mr *MockCalculatorClientMockRecorder) GetSum(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSum", reflect.TypeOf((*MockCalculatorClient)(nil).GetSum), varargs...)
}
